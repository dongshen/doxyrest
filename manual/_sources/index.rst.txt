.. .............................................................................
..
..  This file is part of the Doxyrest toolkit.
..
..  Doxyrest is distributed under the MIT license.
..  For details see accompanying license.txt file,
..  the public copy of which is also available at:
..  http://tibbo.com/downloads/archive/doxyrest/license.txt
..
.. .............................................................................

Doxyrest Manual
===============

Abstract
--------

Doxyrest is a compiler from **Doxygen** XML to **reStructuredText** -- hence, the name. It parses XML database generated by `Doxygen <http://www.stack.nl/~dimitri/doxygen/>`_, feeds it to Lua-based **string template engine** and produces reStructuredText suitable for being passed further on to Python documentation generator `Sphinx <http://www.sphinx-doc.org>`_.

The main purpose of Doxyrest is to generate **beautiful** Sphinx-based documentation for **C/C++** APIs. But not just that!

Doxygen can be replaced with your own source-code-analyzing tool capable of producing Doxygen-compatible XML databases. Lua frames used for generation of reStructuredText can also be replaced with your own ones. It means that both the input and the output of Doxyrest are **100% customizable** -- and without re-compilation!

To rephrase, Doxyrest could be used to produce customizable documentation/stats/reports for APIs written in **any programming language**!

Motivation
----------

Sadly enough, in the year 2016 fellow C/C++ programmers don't have much choice when it comes to documenting their C/C++ APIs. It basically boils down to these **three options**:

1) **Doxygen**;
2) **QDoc**;
3) Writing everything **manually**.

I will dismiss the option #3 right away. If the API is evolving -- which is (almost) always the case as long as the product is alive -- it is simply **impossible** to keep **coherence** between the documentation and the C/C++ sources. To rephrase, manually written API documentation is **always out-of-sync**.

Next, Doxygen. Don't get me wrong. Doxygen was **revolutional** when if first emerged, and it quickly became a **de-facto standard** of documenting C/C++ code. But unfortunately, it has two major problems:

	1. The default Doxygen output is... **not** exactly **good-looking**, to say the least.

		Some people may not be as picky as I am, but I believe no professional web designer would ever use words "Doxygen" and "beautiful" in the same sentence. But you know what, it would be alright -- should Doxygen provide a way to tweak its output! Which leads us to a larger problem...

	2. Doxygen never really developed sufficient **customizability**.

		Too much is **hardcoded** into the **monolithic C++** core of Doxygen. That applies to both the back-end (generation of HTML and PDF) and to the front end (source code parser).

QDoc generates much, **much nicer** default HTML output. But it shares the biggest problem of Doxygen:

	1. Both the parser and the HTML emitter are **hardcoded** into the very same **monolithic C++** core!

		You **can't customize** much in the output other than changing a few QDoc configuration variables in ``.qdocconf`` files and then twiddling CSS. Moreover, unlike Doxygen, which tries to be a multi-language documentation generator, QDoc is strictly **C++ only** [#f1]_!

Besides, and this was also crucial for us at Tibbo,

	2. There is **no PDF** output!

I was contemplating the idea of creating a better alternative for documenting C/C++ for many years already. But the actual decision to finally get down to it came with the need to document `Jancy <http://tibbo.com/jancy>`_ API for `IO Ninja <http://tibbo.com/ninja>`_ (a universal all-in-one low-level IO debugger).

Jancy is a C-family scripting language, but its keyword set and new syntax constructs make it impossible to be passed to the out-of-the-box Doxygen (and obviously, not to QDoc). And neither provide front-end modularity -- to add a new parser you need to merge it into the monolithic ะก++ core and re-compile everything.

So, I finally decided to fix the problem **once and for all** -- and **Doxyrest** was born!

Further Reading
---------------

.. toctree::
	:titlesonly:

	architecture.rst
	frames.rst
	lua_global.rst
	cmd-line.rst
	samples.rst

.. rubric:: Footnotes:

.. [#f1] And not even just C++, but the QT-dialect of C++ -- with all the ``Q_OBJECT``, ``Q_PROPERTY``, ``foreach`` etc macro language extensions.
