.. index:: pair: struct; apr_memnode_t
.. _doxid-structapr__memnode__t:
.. _cid-apr_memnode_t:

struct apr_memnode_t
====================

.. toctree::
	:hidden:

.. code-block:: cpp
	:class: overview-code-block

	#include <apr_allocator.h>


Overview
~~~~~~~~

basic memory node structure The next, ref and first_avail fields are available for use by the caller of :ref:`apr_allocator_alloc() <doxid-group__apr__allocator_1ga7452b0837c2148bd63109f89bbc0c3db>` , the remaining fields are read-only. :ref:`More...<details-doxid-structapr__memnode__t>`

.. ref-code-block:: cpp
	:class: overview-code-block

	// fields

	:ref:`apr_memnode_t<doxid-structapr__memnode__t>`* :ref:`next<doxid-structapr__memnode__t_1a07dd84ca152164d6bc283dbce99f8f78>`
	:ref:`apr_memnode_t<doxid-structapr__memnode__t>`** :ref:`ref<doxid-structapr__memnode__t_1ac68a939c0c3d48498ec0c0fde409c502>`
	apr_uint32_t :ref:`index<doxid-structapr__memnode__t_1a6188325f9e1cbcafcb0a65b7e41881a1>`
	apr_uint32_t :ref:`free_index<doxid-structapr__memnode__t_1af63769f30f6eb9d72e4b24050bd7a9d9>`
	char* :ref:`first_avail<doxid-structapr__memnode__t_1a863e7980225e46678881271c4c803e4c>`
	char* :ref:`endp<doxid-structapr__memnode__t_1a35c9bf71f1cc680929f857176b547a05>`

.. _details-doxid-structapr__memnode__t:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

basic memory node structure The next, ref and first_avail fields are available for use by the caller of :ref:`apr_allocator_alloc() <doxid-group__apr__allocator_1ga7452b0837c2148bd63109f89bbc0c3db>` , the remaining fields are read-only. The next field has to be used with caution and sensibly set when the memnode is passed back to :ref:`apr_allocator_free() <doxid-group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8>` . See :ref:`apr_allocator_free() <doxid-group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8>` for details. The ref and first_avail fields will be properly restored by :ref:`apr_allocator_free() <doxid-group__apr__allocator_1ga124e48339838213fd5e160a4125cb7e8>` .

Fields
------

.. _doxid-structapr__memnode__t_1a07dd84ca152164d6bc283dbce99f8f78:
.. _cid-apr_memnode_t::next:
.. ref-code-block:: cpp
	:class: title-code-block

	:ref:`apr_memnode_t<doxid-structapr__memnode__t>`* next

next memnode

.. _doxid-structapr__memnode__t_1ac68a939c0c3d48498ec0c0fde409c502:
.. _cid-apr_memnode_t::ref:
.. ref-code-block:: cpp
	:class: title-code-block

	:ref:`apr_memnode_t<doxid-structapr__memnode__t>`** ref

reference to self

.. _doxid-structapr__memnode__t_1a6188325f9e1cbcafcb0a65b7e41881a1:
.. _cid-apr_memnode_t::index:
.. ref-code-block:: cpp
	:class: title-code-block

	apr_uint32_t index

size

.. _doxid-structapr__memnode__t_1af63769f30f6eb9d72e4b24050bd7a9d9:
.. _cid-apr_memnode_t::free_index:
.. ref-code-block:: cpp
	:class: title-code-block

	apr_uint32_t free_index

how much free

.. _doxid-structapr__memnode__t_1a863e7980225e46678881271c4c803e4c:
.. _cid-apr_memnode_t::first_avail:
.. ref-code-block:: cpp
	:class: title-code-block

	char* first_avail

pointer to first free memory

.. _doxid-structapr__memnode__t_1a35c9bf71f1cc680929f857176b547a05:
.. _cid-apr_memnode_t::endp:
.. ref-code-block:: cpp
	:class: title-code-block

	char* endp

pointer to end of free memory

