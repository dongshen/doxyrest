.. index:: pair: enum; libusb_transfer_flags
.. _doxid-group__libusb__asyncio_1ga1fb47dd0f7c209b60a3609ff0c03d56d:
.. _cid-libusb_transfer_flags:

enum libusb_transfer_flags
==========================



Overview
~~~~~~~~

:ref:`libusb_transfer.flags <doxid-structlibusb__transfer_1ae26c063df30c2e29835212aad98c6e06>` values :ref:`More...<details-doxid-group__libusb__asyncio_1ga1fb47dd0f7c209b60a3609ff0c03d56d>`

.. ref-code-block:: cpp
	:class: overview-code-block

	// enum values

	:ref:`LIBUSB_TRANSFER_SHORT_NOT_OK<doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56dae4c0697c266819c51c1734b3456e7276>` = 1 < <0
	:ref:`LIBUSB_TRANSFER_FREE_BUFFER<doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56dae993a26f495ac9949118e23eafa19e86>` = 1 < <1
	:ref:`LIBUSB_TRANSFER_FREE_TRANSFER<doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56dacf3f064997b283a14097c9f4d6f8ccc1>` = 1 < <2
	:ref:`LIBUSB_TRANSFER_ADD_ZERO_PACKET<doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56da26b66334b6ec0537c49841ca623d901f>` = 1  < <3

.. _details-doxid-group__libusb__asyncio_1ga1fb47dd0f7c209b60a3609ff0c03d56d:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

:ref:`libusb_transfer.flags <doxid-structlibusb__transfer_1ae26c063df30c2e29835212aad98c6e06>` values

Enum Values
-----------

.. _doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56dae4c0697c266819c51c1734b3456e7276:
.. _cid-libusb_transfer_flags::libusb_transfer_short_not_ok:
.. ref-code-block:: cpp
	:class: title-code-block

	LIBUSB_TRANSFER_SHORT_NOT_OK

Report short frames as errors.

.. _doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56dae993a26f495ac9949118e23eafa19e86:
.. _cid-libusb_transfer_flags::libusb_transfer_free_buffer:
.. ref-code-block:: cpp
	:class: title-code-block

	LIBUSB_TRANSFER_FREE_BUFFER

Automatically free() transfer buffer during :ref:`libusb_free_transfer() <doxid-group__libusb__asyncio_1ga6ab8b2cff4de9091298a06b2f4b86cd6>` .

Note that buffers allocated with :ref:`libusb_dev_mem_alloc() <doxid-group__libusb__asyncio_1ga47c492e750197f1a28874c7a0dee40e3>` should not be attempted freed in this way, since free() is not an appropriate way to release such memory.

.. _doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56dacf3f064997b283a14097c9f4d6f8ccc1:
.. _cid-libusb_transfer_flags::libusb_transfer_free_transfer:
.. ref-code-block:: cpp
	:class: title-code-block

	LIBUSB_TRANSFER_FREE_TRANSFER

Automatically call :ref:`libusb_free_transfer() <doxid-group__libusb__asyncio_1ga6ab8b2cff4de9091298a06b2f4b86cd6>` after callback returns.

If this flag is set, it is illegal to call :ref:`libusb_free_transfer() <doxid-group__libusb__asyncio_1ga6ab8b2cff4de9091298a06b2f4b86cd6>` from your transfer callback, as this will result in a double-free when this flag is acted upon.

.. _doxid-group__libusb__asyncio_1gga1fb47dd0f7c209b60a3609ff0c03d56da26b66334b6ec0537c49841ca623d901f:
.. _cid-libusb_transfer_flags::libusb_transfer_add_zero_packet:
.. ref-code-block:: cpp
	:class: title-code-block

	LIBUSB_TRANSFER_ADD_ZERO_PACKET

Terminate transfers that are a multiple of the endpoint's wMaxPacketSize with an extra zero length packet.

This is useful when a device protocol mandates that each logical request is terminated by an incomplete packet (i.e. the logical requests are not separated by other means).

This flag only affects host-to-device transfers to bulk and interrupt endpoints. In other situations, it is ignored.

This flag only affects transfers with a length that is a multiple of the endpoint's wMaxPacketSize. On transfers of other lengths, this flag has no effect. Therefore, if you are working with a device that needs a ZLP whenever the end of the logical request falls on a packet boundary, then it is sensible to set this flag on *every* transfer (you do not have to worry about only setting it on transfers that end on the boundary).

This flag is currently only supported on Linux. On other systems, :ref:`libusb_submit_transfer() <doxid-group__libusb__asyncio_1gabb0932601f2c7dad2fee4b27962848ce>` will return LIBUSB_ERROR_NOT_SUPPORTED for every transfer where this flag is set.

Available since libusb-1.0.9.

